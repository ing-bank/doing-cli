{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p><code>doing</code> is a CLI tool for Azure DevOps that helps mimic the common repository/issue workflow from Github and Gitlab.</p> <p>In Azure DevOps an issue (work item) is not directly related to a repository (here's why). <code>doing</code> solves this by adding a <code>.doing-cli-config.yml</code> file to the root of a repository containing information on the associated area and iteration paths. This enables <code>doing</code> to list, create and quickly access repository-related issues.</p>"},{"location":"#highlights","title":"Highlights","text":"<p>quickly starting work on a new issue</p> <pre><code>$ doing workon \"fixing a small typo\"\n&gt; Created work item #146545 'fixing a small typo' (User Story)\n        &gt; added area-path '{your area path}'\n        &gt; added iteration-path '{your iteration path}'\n        &gt; added assignee '{your azure account}'\n&gt; Created remote branch '146545_fixing_a_small_typo'\n&gt; Created pull request #49281 'fixing a small typo'\n        &gt; linked work item #146545\n        &gt; marked as draft pull request\n        &gt; set auto-complete to 'True'\n        &gt; set to delete remote source branch after PR completion\n        &gt; added reviewers: '{your azure account}'\n        $ Running command: git fetch origin\n        $ Running command: git checkout -b 146545_fixing_a_small_typo origin/146545_fixing_a_small_typo\n</code></pre> <p>listing issues linked to a repository</p> <pre><code>$ doing list\n                 Work-items in current iteration project_name\\team_name                  \n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503     ID \u2503                  Title \u2503   Assignee \u2503       Type \u2503       Created \u2503   PRs \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502  36893 \u2502           explore data \u2502 John       \u2502 User Story \u2502 2 months ago  \u2502       \u2502\n\u2502  43769 \u2502       feature pipeline \u2502 Artur      \u2502 User Story \u2502 5 days ago    \u2502       \u2502\n\u2502  99035 \u2502             window bug \u2502 Artur      \u2502       Task \u2502 3 hours ago   \u2502 39949 \u2502\n\u2502 104436 \u2502 data loading functions \u2502 Jane       \u2502       Task \u2502 just now      \u2502       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Getting started: A hands-on introduction to <code>doing</code> for developers. Recommended for all new users</li> <li>How-to guides: Step-by-step guides. Covers key tasks and operations and common problems.</li> <li>Commands: Technical reference covering the all commands.</li> <li>Config: Technical reference covering configuration using a config file or environment variables.</li> <li>Discussion: Explanation. Clarification and discussion of key topics.</li> </ul>"},{"location":"#-help","title":"<code>--help</code>","text":"<p>Note that all commands are also documented in the CLI app:</p> <pre><code>$ doing --help\n\nUsage: doing [OPTIONS] COMMAND [ARGS]...\n\n  CLI for repository/issue workflow on Azure Devops.\n\nOptions:\n  --version  Show the version and exit.\n  --help     Show this message and exit.\n\nCommands:\n  init    Create a .doing-cli-config file.\n  list    List issues related to the project.\n  issue   Work with issues.\n  pr      Work with pull requests.\n  workon  Create issue with PR and switch git branch.\n  open    Quickly open certain links.\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>The <code>doing</code> tool is an acronym for devops-ing. The tool was built to help speed up development a data science teams using Azure Devops but more accustomed to a github/gitlab style workflow.</p> <p>The tool uses modern python packages like Click and rich and is built on top of the azure devops CLI.</p>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>We use mkdocs with mkdocs-material theme. The docs are structured using the Di\u00e1taxis documentation framework. To view the docs locally:</p> <pre><code>pip install mkdocs-material\nmkdocs serve\n</code></pre>"},{"location":"contributing/#setup","title":"Setup","text":"<ul> <li>We use pre-commit. Setup using <code>pip install pre-commit</code> and then <code>pre-commit install</code>.</li> <li>For development, use an editable install: <code>pip install -e .</code></li> <li>For publishing,</li> <li>Update the version on <code>src/doing/__init__.py</code> &amp; commit</li> <li>Tag and push a release using: <code>git tag -a v0.1 -m \"doing-cli v0.1\" &amp;&amp; git push origin v0.1</code></li> <li>Draft a new release at https://github.com/ing-bank/doing-cli/releases</li> <li>The publish pypi github action will trigger when the release is published.</li> </ul>"},{"location":"contributing/#technical-background","title":"Technical background","text":"<p>We are basically wrapping the Azure Devops CLI.</p> <ul> <li>Azure Devops commands reference</li> <li>Tips for using azure devops cli effectively</li> </ul>"},{"location":"contributing/#examples-of-using-azure-devops-cli","title":"Examples of using azure devops CLI","text":"<p>Here for reference. To view all shell commands being executed during a <code>doing</code> command, set <code>verbose_shell</code> to <code>True</code> in the <code>.doing-cli-config.yml</code> file (see config reference), or use environment variables: <code>export DOING_CONFIG_VERBOSE_SHELL=true</code>.</p> <pre><code># Settings\norganization={your organization url}\nproject={your project}\nteam={your team}\niteration={your iteration path}\narea={your area path}\nrepo_name={name of your repo in azure devops}\n\n# Configuration\naz devops configure -l\naz devops configure --defaults organization=$organization project=$project\n\n# List areas for a team\naz boards area team list --team=$team\n\n# list work items\naz boards work-item show --id 37222\naz boards query --wiql \"SELECT * FROM WorkItems WHERE ([System.State] = 'Active' OR [System.State] = 'New') AND [System.IterationPath] = '$iteration' AND [System.AreaPath] = '$area'\"\n# list relation types\naz boards work-item relation list-type --query 'name'\n\n# Update a work item\naz boards work-item relation add --id 112011 --relation-type 'Branch' --target-id 6566809\n# Artifact Link\naz boards work-item relation add --id 112011 --relation-type 'Artifact Link' --target-id 6566809\n# from ojbectID of a branch with\naz repos ref list --repository $repo_name\naz boards work-item relation add --id 112011 --target-id \"&lt;hash&gt;\" --relation-type \"Artifact Link\"\n\n# List iterations\n#https://docs.microsoft.com/en-us/cli/azure/ext/azure-devops/boards?view=azure-cli-latest#ext_azure_devops_az_boards_query\n#https://docs.microsoft.com/en-us/azure/devops/boards/queries/wiql-syntax?view=azure-devops\naz boards iteration team show-backlog-iteration --team $team\naz boards iteration project list --path '$organization/$project/$repo_name/sprintname'\naz boards iteration project show --id '&lt;hash&gt;'\naz boards iteration team list --team $team\n\n# List remote branches\naz repos ref list --repository $repo_name --query '[].name'\n\n# Creating work items\naz boards work-item create --title \"Test from command line\" --type \"User Story\" --area $area\naz boards work-item create --title \"testing\" --type \"User Story\" --area $area --iteration $iteration --assigned-to \"&lt;your email&gt;\"\n\n# Deleting work items\naz boards work-item delete --id 112011\n\n# Creating a branch\n# 1) get object id of master branch:\naz repos ref list --repository $repo_name --query \"[?name=='refs/heads/master'].objectId\"\n# 2) get branch\naz repos ref create --name \"heads/&lt;branch name&gt;\" --repository $repo_name --object-id \"&lt;hash&gt;\"\n\n# Creating a PR\naz repos pr create --repository $repo_name --work-items '112011' --draft --title \"test pr\" --source-branch \"&lt;branch name&gt;\" --transition-work-items 'true'\n\n# Get a repository id, as well as default branch\naz repos show --repository '&lt;repo_name&gt;'\n\n# List policies active on a repo branch\naz repos policy list --repository \"&lt;id_hash&gt;\" --branch 'master' -o jsonc\n\naz repos policy merge-strategy create --repository \"&lt;id_hash&gt;\" --branch 'refs/heads/master' --blocking false --enabled true --allow-no-fast-forward true --allow-rebase true --allow-rebase-merge true --allow-squash true\n</code></pre>"},{"location":"config/config_file/","title":"The .doing-cli-config.yml config file","text":"<p>When running a command <code>doing</code> searches for YAML config file named <code>.doing-cli-config.yml</code>. This file is required and used to link issues to a repository (see discussion).</p>"},{"location":"config/config_file/#required-parameters","title":"Required parameters","text":"<p>The config must contain the following parameters (in lowercase):</p> Parameter Description <code>organization</code> Azure DevOps organization URL. You can quickly find the organization in your devops url, right after https://dev.azure.com. Example: https://dev.azure.com/organization_name. <code>project</code> Name of the project. You can quickly find the organization in a devops url, right after the organization url. Example: The project for https://dev.azure.com/your_organization/your_project/... is your_project. <code>team</code> The name of your team. You can quickly find it when navigating on Azure Devops to Boards &gt; Boards. Example: The team in https://dev.azure.com/organization_name/project_name/_boards/board/t/my_team/Stories is my_team. <code>area</code> The area path assigned to work items. You can find it by going to a work item (Azure Devops &gt; Boards &gt; Work items) and copying the Area field. This corresponds to the work item field System.AreaPath. More about area and iteration paths. <code>iteration</code> The iteration path assigned to work items. You can find it going by to a work item (Azure Devops &gt; Boards &gt; Work items) and copying the Iteration field. This corresponds to the work item field System.IterationPath. More about area and iteration paths. <p>Example <code>.doing-cli-config.yml</code>:</p> <pre><code># .doing-cli-config.yml\norganization: 'https://dev.azure.com/organization_name'\nproject: 'project_name'\nteam: 'team-name'\narea: 'organization_name\\repo_name\\area_name'\niteration: 'organization_name\\team_name\\iteration_name'\n</code></pre>"},{"location":"config/config_file/#optional-parameters","title":"Optional parameters","text":"<p>The config can also contain some optional parameters that are not required to be set. Here's a summary:</p> Optional Parameter Description <code>verbose_shell</code> Set to 'true' to print every shell command <code>doing</code> runs for you in the background. Meant for debugging and interested developers. Default is 'false'. <code>user_aliases</code> A list of user aliases that you can use when specifying reviewers or assignees. Note that the <code>@me</code> alias is always available. <code>default_reviewers</code> The default reviewers assigned when creating pull requests. Space separated list of user emails (case sensitive). Find your own with <code>az ad signed-in-user show --query 'mail'</code>. <code>custom_states</code> A dictionary of work item states or lists of states to use when filtering work items with <code>doing list --state \"state\"</code>. <code>defaults</code> Allows you to overwrite defaults of command options. See explanation below. <code>merge_strategy</code> Azure devops supports pull requests with rebase (see blogpost). Should be one of \"basic merge\", \"squash merge\", \"rebase and fast-forward\", \"rebase with merge commit\". If specified, it will update the policies on a repository level to only allow that merge strategy. <code>encoding</code> The encoding used to parse the response of terminal commands. This is auto-detected by default but can be set explicitly in case you have encoding trouble. <p>Example <code>.doing-cli-config.yml</code> with all optional parameters set:</p> <pre><code># .doing-cli-config.yml\n# ... other required parameters ...\nverbose_shell: true\nencoding: 'UTF-8'\nuser_aliases:\njohn: 'John.Doe@company.com'\njane: 'Jane.Doe@email.net'\ndefault_reviewers: 'john.doe@domain.com'\ncustom_states:\nremoved: Removed\nresolved: [Resolved, Closed]\ndefaults:\nDOING_LIST_STATE: all\nmerge_strategy: \"rebase and fast-forward\"\n</code></pre>"},{"location":"config/config_file/#setting-verbose_shell","title":"Setting <code>verbose_shell</code>","text":"<p>Set to 'true' to print every shell command <code>doing</code> runs for you in the background. Meant for debugging and interested developers. Default is 'false'.</p> <pre><code># .doing-cli-config.yml\nverbose_shell: true\n</code></pre>"},{"location":"config/config_file/#setting-encoding","title":"Setting <code>encoding</code>","text":"<p>The encoding used to parse the response of terminal commands. This is auto-detected by default but can be set explicitly in case you have encoding trouble.</p> <pre><code># .doing-cli-config.yml\nencoding: 'UTF-8'\n</code></pre>"},{"location":"config/config_file/#setting-user_aliases","title":"Setting <code>user_aliases</code>","text":"<p>Anywhere you can specify <code>assignee</code> or <code>reviewer</code>, you can fill in user email adress. These are case-sensitive, and lenghty, so you can also choose to define a set of user aliases:</p> <pre><code># .doing-cli-config.yml\nuser_aliases:\njohn: 'John.Doe@company.com'\njane: 'Jane.Doe@email.net'\n</code></pre> <p>Now you can use aliases like:</p> <pre><code>doing issue create --assignee \"john\"\n</code></pre>"},{"location":"config/config_file/#setting-default_reviewers","title":"Setting <code>default_reviewers</code>","text":"<p>You might have a project where all pull requests have the same set of reviewers. Instead of using the lengthy <code>doing pr create --reviewers 'email1@domain.com email2@domain.com'</code>, you can set a default set of reviewers in the <code>.doing-cli-config.yml</code> (see config) by specifying <code>default_reviewers</code>. For example:</p> <pre><code># .doing-cli-config.yml\ndefault_reviewers: 'email1@domain.com email2@domain.com'\n</code></pre> <p>You can also use the aliases specified in <code>user_aliases</code> to specify the <code>default_reviewers</code>.</p>"},{"location":"config/config_file/#setting-custom_states","title":"Setting <code>custom_states</code>","text":"<p>When listing work items you can filter them by state with <code>doing list --state \"state\"</code>. <code>doing-cli</code> includes some default options for this filter:</p> <ul> <li><code>open</code>: state not in <code>['Resolved','Closed','Done','Removed']</code></li> <li><code>closed</code>: state in <code>['Resolved','Closed','Done']</code></li> <li><code>all</code>: state different than <code>'Removed'</code></li> </ul> <p>You can overwrite these or specify your own custom state filters. For example:</p> <pre><code># .doing-cli-config.yml\ncustom_states:\nremoved: Removed\nresolved: [Resolved, Closed]\n</code></pre> <p>Which can be used as:</p> <pre><code>doing list --state \"removed\"\n</code></pre>"},{"location":"config/config_file/#setting-defaults","title":"Setting <code>defaults</code>","text":"<p>For every <code>doing</code> command, you can use <code>--help</code> to see any default for an option (if applicable), as well as the name (in capital letters) of that option, listed after 'env var'. For example, <code>doing issue create --help</code> has an option named <code>DOING_ISSUE_CREATE_LABEL</code> (in the help, listed as  <code>[env var: DOING_ISSUE_CREATE_LABEL]</code>).</p> <p>You can use those variable names to set different defaults for commands in your <code>.doing-cli-config.yml</code> file.</p> <p>Here's an example <code>.doing-cli-config.yml</code>:</p> <pre><code># .doing-cli-config.yml\n# ... other settings ...\ndefaults:\nDOING_LIST_STATE: all\nDOING_WORKON_TYPE: Bug\nDOING_LIST_LABEL: \"some_tag another_tag something\"\n</code></pre> <p>This is a great way to set defaults for your entire team. If you would like to set personal defaults you can choose to use environment variables instead.</p> <p>Priority of settings</p> <p><code>doing</code> uses the following order of priority:</p> <ol> <li>Options set directly on the command list, f.e.: <code>doing list --state all</code></li> <li>Options set as environment variable, f.e.: <code>export DOING_LIST_STATE=all</code></li> <li>Options set in the <code>.doing-cli-config.yml</code> file, f.e.: setting <code>DOING_LIST_STATE: all</code> under <code>defaults</code></li> </ol>"},{"location":"config/config_file/#setting-merge_strategy","title":"Setting <code>merge_strategy</code>","text":"<p>Azure devops supports 4 different types of merge strategies (blogpost). You can set a policy to allow a specific set of 1 or more strategies for each repository you work on, using the Azure Devops admin panel or <code>az repos policy merge-strategy</code>.</p> <p>Often a team agrees on a single merge strategy for all PRs. <code>doing</code> makes it easy to set the merge-strategy for everyone in the <code>.doing-cli-config.yml</code> file. For example:</p> <pre><code># .doing-cli-config.yml\n# ... other settings ...\nmerge_strategy: \"rebase and fast-forward\"\n</code></pre> <p>These are the merge strategies allowed: </p> Merge strategy Description basic merge Basic merge (no fast-forward) - Preserves nonlinear history exactly as it happened during development. squash merge Individual commits that made up the pull request are combined into a single commit onto the target without a merge commit. rebase and fast-forward Creates a linear history by replaying the source branch commits onto the target without a merge commit. rebase with merge commit Creates a semi-linear history by replaying the source branch commits onto the target and then creating a merge commit. <p>If specified, everytime before a PR is created, <code>doing</code> will check and if needed update the policies on a repository level to only allow that merge strategy to the default branch (often <code>master</code>). If not specified, <code>doing</code> will not check any merge policies and a PR will be created with whatever the default policies in your azure devops organization/project are. Often this is a \"basic merge\".</p>"},{"location":"config/env_config/","title":"Using environment variables","text":"<p><code>doing</code> supports the use of environment variables to overwrite and set options.</p> <p>Set an environment using <code>export</code> and avoid using <code>set</code>)</p>"},{"location":"config/env_config/#overwriting-commands-default-options","title":"Overwriting commands default options","text":"<p>You can overwrite any command option using the <code>env var</code> name specified when you type <code>--help</code>. For example, <code>doing issue create --help</code> has an option named <code>DOING_ISSUE_CREATE_LABEL</code> (in the help, listed as  <code>[env var: DOING_ISSUE_CREATE_LABEL]</code>).</p> <p>Some examples:</p> doing issue create <pre><code>export DOING_ISSUE_CREATE_TYPE=\"Task\"\ndoing issue create \"A task\"\n</code></pre> doing workon <pre><code>export DOING_WORKON_TYPE=\"Task\"\ndoing workon \"A task\"\n</code></pre> doing list <pre><code>export DOING_CONFIG_ITERATION='your_project\\your_team\\sprint1'\ndoing list\ndoing issue create \"a new issue in the current sprint\"\n\nexport DOING_CONFIG_ITERATION='your_project\\your_team\\sprint2'\ndoing list\ndoing issue create \"a new issue in the next sprint\"\n\nunset DOING_CONFIG_ITERATION\n</code></pre> <p>Priority of settings</p> <p><code>doing</code> uses the following order of priority:</p> <ol> <li>Options set directly on the command list, f.e.: <code>doing list --state all</code></li> <li>Options set as environment variable, f.e.: <code>export DOING_LIST_STATE=all</code></li> <li>Options set in the <code>.doing-cli-config.yml</code> file, f.e.: setting <code>DOING_LIST_STATE: all</code> under <code>defaults</code></li> </ol>"},{"location":"config/env_config/#overwriting-config-file-parameters","title":"Overwriting config file parameters","text":"<p>You can overwrite the values set in <code>doing-cli-config.yml</code> using environment variables. Use the prefix <code>DOING_CONFIG_</code> followed by the parameter name in uppercase. Any config set as environment variable will overwrite config parameters set in the config file.</p> <p>Some examples: </p> Parameter Environment variable <code>team</code> <code>DOING_CONFIG_TEAM</code> <code>iteration</code> <code>DOING_CONFIG_ITERATION</code> <pre><code># Example usage\nexport DOING_CONFIG_VERBOSE_SHELL=True\ndoing list\n</code></pre>"},{"location":"discussion/oneproject_setup/","title":"Azure Devops One Project Setup","text":"<p>Azure Devops has a limit of 250 projects per azure organization. A lot of collaboration possibilities are not possible between azure organizations. As a consequence, larger companies cannot allow teams to have one or more projects.</p> <p>The solution is surprisingly simple: combine all teams into a single project from a single organization. In this 'One Project' setup, the link between a repository and an issue (work item) is not so clear, because a team can have multiple repositories but only a single board. Many developers however are used to the github or gitlab way of working, where a project has a single repository and a single associated board with issues.</p> <p>In the diagram below you can see that a work item always has an area-path and an iteration-path, which are unique to a certain team. A work item can be linked to a branch of an existing repository, which is often a branch made specifically to work on the issue. Of course this enables managing projects with multiple repositories and different teams working on different aspects, but often an actual project means you would like a single issue board to match a single repository. </p> erDiagram     TEAM }|--|| ITERATION-PATHS : has     TEAM }|--|| AREA-PATHS : has      WORK-ITEM ||--|{ AREA-PATHS : has     WORK-ITEM ||--|{ ITERATION-PATHS : has      REPOSITORY-BRANCH }|--|{ WORK-ITEM : links <p>If you work on many repositories (for example as an individual contributor), figuring out which work items are related to it (like a github or gitlab issue board) is cumbersome at best.  This is only exacerbated by common company policies set in Azure Devops that enforce every commit to be linked to a peer-reviewed pull request, and each pull request to have at least one linked work item. </p> <p>To restore the single repository and single issue board workflow, <code>doing</code> stores the area path and iteration path information in a config in the root of each repo, and uses that information to expose a small set of CLI commands that help mimic the familiar github/gitlab workflow.</p>"},{"location":"discussion/upgrading/","title":"Upgrading","text":"<p>Doing Releases</p> <p>All release details can be found on the doing releases page.</p>"},{"location":"discussion/upgrading/#v10","title":"v1.0","text":"<p>See release notes</p>"},{"location":"discussion/upgrading/#upgrading-from-0x-to-10","title":"Upgrading from <code>0.x</code> to <code>1.0</code>","text":"<ul> <li>Update any reference to renamed commands:<ul> <li><code>doing create pr</code> is renamed to <code>doing pr create</code></li> <li><code>doing close pr</code> is renamed to <code>doing pr close</code></li> <li><code>doing create issue</code> is renamed to <code>doing issue create</code></li> <li><code>doing close issue</code> is renamed to <code>doing issue close</code></li> </ul> </li> <li><code>doing pr create</code> now has changed defaults. The command now has similar output to <code>doing workon</code> which leads to a more natural workflow. If you prefer the old behaviour, set the defaults in the config file:<ul> <li><code>--checkout</code> is now default (was <code>--no-checkout</code>)</li> <li><code>--delete-source-branch</code> is now default (was <code>--no-delete-source-branch</code>)</li> <li><code>--auto-complete</code> is now default (was <code>--no-auto-complete</code>)</li> <li><code>--draft</code> is now default (was <code>--no-draft</code>)</li> </ul> </li> <li>Note the use of the <code>@me</code> alias:<ul> <li><code>doing pr create</code> will now always add <code>@me</code> to the <code>--reviewers</code> (a default user alias pointing to the logged in users's azure account).</li> <li><code>doing workon</code> will now always add <code>@me</code> to the <code>--reviewers</code> (a default user alias pointing to the logged in users's azure account).</li> </ul> </li> <li><code>doing issue create</code> has been changed:<ul> <li><code>-a/--assigned-to</code> is renamed to <code>-a/--assignee</code>, and supports <code>@me</code> alias.</li> </ul> </li> </ul>"},{"location":"get_started/install/","title":"Installation","text":""},{"location":"get_started/install/#installing-the-tool","title":"Installing the tool","text":"<p>You can install the tool with</p> <pre><code>$ pip install doing-cli\n---&gt; 100%\nSuccessfully installed doing-cli\n</code></pre> <p>You should then be able to view the help file by running <code>doing</code>:</p> <pre><code>$ doing\n\nUsage: doing [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  list     List issues related to the project.\n  nothing  Take a break.\n  open     Quickly open certain links\n  workon   Work on a new work item.\n</code></pre>"},{"location":"get_started/install/#installing-azure-cli","title":"Installing Azure CLI","text":"<p>To use <code>doing</code> we also need to install Azure's <code>az</code> CLI tool.</p> Manually <ul> <li>Install azure cli</li> <li>Install azure cli devops extension</li> </ul> On Mac via command line <p>If you're on mac, you can install both quickly via the command line:</p> <pre><code>brew update &amp;&amp; brew install azure-cli\naz extension add --name azure-devops\n</code></pre> <p>You can confirm the installation by running <code>az devops --help</code>. If you see the help files, the installation was succesfull.</p>"},{"location":"get_started/setup_auth/","title":"Setup authentication","text":"<p><code>doing</code> needs authentication to Azure Devops in order to work. The easiest way to provide authorization is through using a personal access token (PAT).</p>"},{"location":"get_started/setup_auth/#creating-a-personal-access-token","title":"Creating a personal access token","text":"<ul> <li>Open dev.azure.com in your browser and sign in with your account.</li> <li>Navigate to your organization's devops space. (for example dev.azure.com/organization_name/)</li> <li>In the top right menu, click on the user gear icon (:fontawesome-solid-user-cog:) and choose 'Personal Access Token' to create a token. See this guide for more detailed instructions.</li> <li>Don't worry about losing this token: you can create a new one easily and just login again with that one.</li> </ul> <p>You can now login to azure devops, pasting your PAT when prompted:</p> <pre><code>$ az devops login\nToken: \n</code></pre> <p>If you want to check if you are logged in and have a connection, run the commands <code>az account show -o jsonc</code> and <code>az devops project list -o jsonc</code>. You should see a JSON response. Not working? See Connection problems.</p>"},{"location":"get_started/setup_project/","title":"Setup your project","text":"<p>Work items are not directly linked to a repository in azure devops. <code>doing</code> looks for a <code>.doing-cli-config.yml</code> file in the root of your repository, that should contain information on how work items are linked. Every work item always has a organization, a devops project, a team, an area path, and an iteration path. For more background on this see this discussion.</p> <p>The easiest way to setup that config file is by using a reference work item. Find the url and run <code>doing init &lt;url&gt;</code> in the root of your repository, which will create the config file with the required parameters for you. For example:</p> <pre><code>$ doing init https://dev.azure.com/organization_name/project_name/_workitems/edit/73554\n&gt; Created new .doing-cli-config.yml file\n        &gt; Filled in required parameters using reference work item #73554\n</code></pre> <p>Alternatively, create a <code>.doing-cli-config.yml</code> file in the root of your repository (you can use <code>doing init</code> to do that quickly) and specify the parameters. The easiest way to find these parameters is by creating or opening a work item, and copying the parameters from there. For information on how to find and set these parameters see the reference .doing-cli-config.yml config file</p>"},{"location":"get_started/setup_project/#verifying-the-setup","title":"Verifying the setup","text":"<p>In the root of your repository, you can check if your configuration works using:</p> <pre><code>$ doing list\n                 Work-items in current iteration project_name\\team_name                  \n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503     ID \u2503                  Title \u2503   Assignee \u2503       Type \u2503       Created \u2503   PRs \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502  36893 \u2502           explore data \u2502 John       \u2502 User Story \u2502 2 months ago  \u2502       \u2502\n\u2502  43769 \u2502       feature pipeline \u2502 Artur      \u2502 User Story \u2502 5 days ago    \u2502       \u2502\n\u2502  99035 \u2502             window bug \u2502 Artur      \u2502       Task \u2502 3 hours ago   \u2502 39949 \u2502\n\u2502 104436 \u2502 data loading functions \u2502 Jane       \u2502       Task \u2502 just now      \u2502       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"howto/command_completion/","title":"Adding shell completion","text":"<p>When enabling autocompletion you can hit Tab to complete <code>doing</code> commands and see follow-up commands. Setup is easy:</p> Bash <p>For Bash, add this to <code>~/.bashrc</code>:</p> <pre><code>eval \"$(_DOING_COMPLETE=source_bash doing)\"\n</code></pre> Zsh <p>For Zsh, add this to <code>~/.zshrc</code>:</p> <pre><code>eval \"$(_DOING_COMPLETE=source_zsh doing)\"\n</code></pre> <p>Ensure that the following is present in your <code>~/.zshrc</code>:</p> <pre><code>autoload -U compinit\ncompinit -i\n</code></pre> <p>Zsh version 5.7 or later is recommended.</p> Fish <p>For Fish, add this to <code>~/.config/fish/completions/foo-bar.fish</code>:</p> <pre><code>eval (env _DOING_COMPLETE=source_fish doing)\n</code></pre> <p>Once setup, typing <code>doing</code> and hitting Tab should give you a list of follow-up commands like shown below. Hitting Tab again will cycle through the options.</p> <pre><code>$ doing\nclose   -- Close an issue or PR.\ncreate  -- Create issues or pull requests.\ninit    -- Create a .doing-cli-config file.\nlist    -- List issues related to the project.\nopen    -- Quickly open certain links.\nworkon  -- Create issue with PR and switch git branch.\n</code></pre>"},{"location":"howto/connection_problems/","title":"How to fix connection problems","text":"<p>Some basic things to try:</p> <ul> <li>In addition to logging in through <code>az devops login</code>, make sure you are logged in to the azure devops environment on the browser as well (you need to go through the 2 factor authentication befor the command line interface works). You can do this using <code>az login</code>.</li> <li>Upgrade azure cli with <code>az upgrade</code> (azure cli).</li> <li>Disconnect from any company VPNs and check if everything works.</li> <li>Try renewing your personal access token and logging in once again through <code>az devops login</code>.</li> </ul>"},{"location":"howto/connection_problems/#working-behind-a-corporate-proxy-virtual-private-network-vpn","title":"Working behind a corporate proxy / virtual private network (VPN)","text":"<p>First check that you can access the internet from your shell.  When connected to a VPN, your company may require you to do this behind a corporate proxy.  For example, try cloning a public repository or updating a package using <code>pip</code> through the public PyPi repository.  If you cannot, contact your company's IT.</p> <p>To use Azure DevOps, you might have to add the certificates of your company to the ones from <code>certifi</code>, which the Python <code>requests</code> package uses to connect to the internet. If this is the case, you will receive an error indicating that you might not have the right certificates to connect to Azure DevOps.</p> <p>To fix this you must install your company's certificates.  Then, set the environment variable <code>REQUESTS_CA_BUNDLE</code> to a bundle of your company's and <code>certifi</code>'s certificate bundles with <code>export REQUESTS_CA_BUNDLE=&lt;bundle location&gt;</code>.</p> <p>If the certificates are correctly setup, both these commands should work: - <code>az devops login</code> - <code>az ad signed-in-user show --query 'mail'</code></p> <p>To keep the <code>certifi</code> certificates up-to-date, add the following script to the end of your <code>.zshrc</code>: <pre><code># Set CA bundle certificate for doing-cli to connect to AzDo\nCERTIFICATES_DIR=$HOME/Documents/certificates\n## Check if there's a new version of the certifi bundle\nif ! cmp -s $CERTIFICATES_DIR/certifi.ca-bundle $(python -m certifi) ; then\necho \"certifi has new certificates. Updating the local certificate bundle.\"\ncat $(python -m certifi) &gt; $CERTIFICATES_DIR/certifi.ca-bundle\n    cat $CERTIFICATES_DIR/&lt;corporate.ca-bundle&gt; $CERTIFICATES_DIR/certifi.ca-bundle &gt; $CERTIFICATES_DIR/corporate-certifi.ca-bundle\nfi\nexport REQUESTS_CA_BUNDLE=$CERTIFICATES_DIR/corporate-certifi.ca-bundle\n</code></pre> where: - <code>CERTIFICATES_DIR</code> is the directory where your company's certificate bundle is stored; -  is your company's certificate bundle; <p>See more information from Azure on working behind a proxy</p>"},{"location":"howto/python_scripting/","title":"Writing python scripts","text":"<p>You can use <code>doing</code> functionality directly from python as well. Here's an example of programmatically creating a bunch of issues:</p> <pre><code>from doing.options import get_common_options\nfrom doing.issue.create_issue import cmd_create_issue\n\nissue_list = ['issue 1','issue 2','issue 3']\n\nfor title in issue_list:\n    cmd_create_issue(title, **get_common_options())\n</code></pre>"},{"location":"howto/workflow_bulk_edit_items/","title":"Workflow bulk editing work items","text":"<p>Sometimes you want to edit multiple work items in one go. You can use <code>doing list</code> to filter the work items that you want to edit and use <code>--output_format='array'</code> to return a bash array that you can loop over.</p>"},{"location":"howto/workflow_bulk_edit_items/#bulk-update-story-points","title":"Bulk update story points","text":"<p>For example, you might want to update all work items that do not have story points assigned yet. You can do that with the <code>az boards work-item update</code> command. Here's an example using a bash script, although you could also use python scripting:</p> <pre><code>for id in $(doing list --story_points 'unassigned' -o 'array')\ndo\naz boards work-item update --id \"$id\" --fields \"Microsoft.VSTS.Scheduling.StoryPoints=1\"\necho \"$id updated with 1 story points\"\ndone\n</code></pre>"},{"location":"howto/workflow_existing_item/","title":"Workflow existing work item","text":"<p>You'll likely want to review existing issues first. <code>cd</code> into your repository and use <code>doing list</code> for a quick view. If you need more detail you can use <code>doing open</code> to open relevant views in the azure devops web portal, for example <code>doing open issues</code>, <code>doing open board</code> or <code>doing open sprint</code>.</p>"},{"location":"howto/workflow_existing_item/#start-on-an-existing-issue","title":"Start on an existing issue","text":"<p>Once you have the issue ID you want to work on, you'll need to create a remote branch and a pull request to be able to start work. You can do that with the <code>doing pr create</code> command. <code>doing</code> follows the branch naming convention <code>&lt;work_item_id&gt;_&lt;issue title&gt;</code>, where the issue title is transformed to snake_case. You can safely run this command multiple times: if the branch already exists, it will use that one, and if the PR already exists for that branch, <code>doing</code> will let you know.</p> <pre><code>$ doing pr create 146545 &gt; Created remote branch '146545_fixing_a_small_typo'\n&gt; Created pull request #49281 'fixing a small typo'\n        &gt; linked work item #146545\n        &gt; set auto-complete to True'\n        &gt; set to delete remote source branch after PR completion\n        &gt; added reviewers: '&lt;your email&gt;'\n        $ Running command: git fetch origin\n        ...\n        # Running command: git checkout -b '146545_fixing_a_small_typo' 'origin/146545_fixing_a_small_typo'\n</code></pre> <p>You can also create a draft PR, assign reviewers, run the git checkout commands and more. See <code>doing pr create --help</code> for the options. Some examples:</p> <pre><code>doing pr create 146545 --reviewers \"john.doe@email.com\"\ndoing pr create 146545 --checkout --draft\n</code></pre>"},{"location":"howto/workflow_existing_item/#start-on-existing-pull-request","title":"Start on existing pull request","text":"<p><code>doing list</code> will also show you if a work item already has a pull request associated with it. Alternatively <code>doing pr list</code> will show you a list of active pull requests. Once you have a pullrequest ID that  you want to get started on, you can use <code>doing pr checkout</code> to quickly <code>git checkout</code> the branch locally.  This is more convenient than manually finding the correct branchname and checkout it out locally (the 'long worflow'):</p> Short workflow <pre><code>doing pr checkout &lt;pullrequest_id&gt;\n</code></pre> Long workflow <pre><code>doing open pr &lt;pullrequest_id&gt; # find branch name\ngit fetch origin\ngit checkout -b '{branch_name}' 'origin/{branch_name}'\n</code></pre>"},{"location":"howto/workflow_existing_item/#using-aliases","title":"Using aliases","text":"<p>To avoid having to type the emailadresses of your teammates every time (which are case sensitive in Azure), you can setup aliases in your <code>.doing-cli-config.yml</code> (see also config file reference):</p> using aliases <pre><code>doing pr create 146545 --reviewers \"john jane\"\n</code></pre> .doing-cli-config.yml <pre><code># ... other config items ...\nuser_aliases:\njohn: John.Doe@company.com\njane: Jane.Doe@email.net\n</code></pre>"},{"location":"howto/workflow_existing_item/#wrap-up","title":"Wrap up","text":"<p>When you're done you can view the:</p> <ul> <li>pull request using <code>doing open pr &lt;pullrequest id&gt;</code>. Use <code>doing list</code> to find your PR id.</li> <li>issue using <code>doing open issue &lt;issue id&gt;</code>. The git branch name has the issue id as a prefix, or alternatively you can use <code>doing list</code> to find the issue id.</li> <li>active pull requests using <code>doing open prs</code></li> <li>pipeline runs using <code>doing open pipe</code></li> </ul>"},{"location":"howto/workflow_new_item/","title":"Workflow for new issues","text":"<p>Before creating a new issue, you'll likely want to review existing issues first. <code>cd</code> into your repository and use <code>doing list</code> for a quick view. If you need more detail you can use <code>doing open</code> to open relevant views in the azure devops web portal, for example <code>doing open issues</code>, <code>doing open board</code> or <code>doing open sprint</code>.</p>"},{"location":"howto/workflow_new_item/#planning-multiple-items","title":"Planning multiple items","text":"<p>If you don't plan to start work on an issue immediately, you can use <code>doing issue create</code> to create a new (unassigned) work item with:</p> <pre><code>doing issue create \"something that needs to be done\"\n</code></pre> <p>You can specify more options (see <code>doing issue create --help</code>). Some examples:</p> <pre><code>doing issue create \"something that needs to be done\" --mine \ndoing issue create \"something that needs to be done\" --assigned_to \"john.doe@company.com\" \ndoing issue create \"something that needs to be done\" --a \"john.doe@company.com\" --type \"Bug\"\ndoing issue create \"something that needs to be done\" --parent \"1234\" --type \"Task\"\n</code></pre>"},{"location":"howto/workflow_new_item/#starting-work-on-a-new-issue","title":"Starting work on a new issue","text":"<p>If you plan to start work on a new issue immediately, it is better to use <code>doing workon</code> instead. All you need to provide is the title:</p> <pre><code>$ doing workon \"fixing a small typo\"\n&gt; Created issue #146545 'fixing a small typo' (User Story)\n        &gt; added area-path '{your area path}'\n        &gt; added iteration-path '{your iteration path}'\n        &gt; added assignee '{your azure account}'\n&gt; Created remote branch '146545_fixing_a_small_typo'\n&gt; Created pull request #49281 'fixing a small typo'\n        &gt; linked work item #146545\n        &gt; marked as draft pull request\n        &gt; set auto-complete to True'\n        &gt; set to delete remote source branch after PR completion\n        &gt; added reviewers: '{your azure account}'\n        $ Running command: git fetch origin\n        $ Running command: git checkout -b 146545_fixing_a_small_typo origin/146545_fixing_a_small_typo\n</code></pre> <p>This automates a lot of clicking in the Azure Devops web portal and even runs git commands locally, so you can immediately start your normal <code>git add</code>, <code>git commit</code> and <code>git push</code> development workflow.</p> <p>See also the workflow for starting work on an existing item</p>"},{"location":"howto/workflow_new_item/#using-aliases","title":"Using aliases","text":"<p>To avoid having to type the emailadresses of your teammates every time (which are case sensitive in Azure), you can setup aliases in your <code>.doing-cli-config.yml</code> (see also config file reference):</p> using aliases <pre><code>doing issue create \"fix bug\" -a john\n# or\ndoing workon \"fix bug\" --reviewers \"john jane\"\n</code></pre> .doing-cli-config.yml <pre><code># ... other config items ...\nuser_aliases:\njohn: John.Doe@company.com\njane: Jane.Doe@email.net\n</code></pre>"},{"location":"howto/workflow_new_item/#starting-work-on-a-new-child-issue","title":"Starting work on a new child issue","text":"<p>Another common workflow is to work on tasks that are part of a user story. In azure devops, work items can be linked (parent/child relationship). <code>doing workon</code> has <code>--parent</code> and <code>--type</code> to accomodate the use case:</p> <pre><code>doing workon \"some work\" --type 'Task' --parent 1234\n</code></pre>"},{"location":"howto/workflow_new_item/#setting-default-work-item-types","title":"Setting default work item types","text":"<p>By default the work item is created with <code>--type</code> 'User Story'. There a lot of different work item types, the most common being \"Bug\", \"Epic\", \"Feature\", \"Issue\", \"Task\", \"Test Case\" and \"User Story\".</p> <p>Setting a different default can by done via the config file. It makes sense to do this immediately for <code>doing workon</code> as well.</p> .doing-cli-config.yml <pre><code>defaults:\nDOING_CREATE_ISSUE_TYPE: 'Bug'\nDOING_WORKON_TYPE: 'Bug'\n</code></pre>"},{"location":"howto/workflow_new_item/#wrap-up","title":"Wrap up","text":"<p>When you're done you can view the:</p> <ul> <li>pull request using <code>doing open pr &lt;pullrequest id&gt;</code>. Use <code>doing list</code> to find your PR id.</li> <li>issue using <code>doing open issue &lt;issue id&gt;</code>. The git branch name has the issue id as a prefix, or alternatively you can use <code>doing list</code> to find the issue id.</li> <li>active pull requests using <code>doing open prs</code></li> <li>pipeline runs using <code>doing open pipe</code> </li> </ul>"},{"location":"howto/workflow_sprints/","title":"Workflow using sprints to manage issues","text":"<p>In azure devops, all work items already have both an area path and an iteration path (a sprint). You can use these in different ways to group and structure your work items, even across multiple repositories (see this discussion for more background).</p>"},{"location":"howto/workflow_sprints/#viewing-your-current-sprint","title":"Viewing your current sprint","text":"<p>A sprint is basically an iteration path. You can view the issues using <code>doing open sprint</code>, <code>doing open board</code> or <code>doing open issues</code>.</p> <p>Note that <code>doing list</code> will show all active issues under the iteration path. This means that if you specify <code>&lt;projectname&gt;/&lt;teamname&gt;</code> as your iteration path, you might see issues with iteration path <code>&lt;projectname&gt;/&lt;teamname&gt;/&lt;sprint name&gt;</code> as well as issues with <code>&lt;projectname&gt;/&lt;teamname&gt;</code>.</p>"},{"location":"howto/workflow_sprints/#changing-sprints","title":"Changing sprints","text":"<p>If you create a new sprint, you will have to update the <code>.doing-cli-config.yml</code> file as well.</p> <p>If you have a frequent sprint schedule, or don't want new issues to enter your sprint, you can specify a higher level iteration path instead (so <code>&lt;projectname&gt;/&lt;teamname&gt;</code> instead of <code>&lt;projectname&gt;/&lt;teamname&gt;/&lt;sprint name&gt;</code>). <code>doing list</code> will still show all active items under the iteration path, and you can use the backlog management (open quickly via <code>doing open sprint</code>) to manually manage the work items in your current sprint.</p>"},{"location":"reference/manual/init/","title":"doing init","text":"<p>Create a .doing-cli-config file.</p> <pre><code>doing init [flags]\n</code></pre>"},{"location":"reference/manual/init/#example-usage","title":"Example usage","text":"<pre><code>doing init\ndoing init https://dev.azure.com/MyOrganization/MyProject/_workitems/edit/73554\ndoing init https://dev.azure.com/MyOrganization/MyProject/_boards/board/t/MyTeam/Stories/?workitem=73554\n</code></pre>"},{"location":"reference/manual/init/#options","title":"Options","text":"<pre><code>Usage: doing init [OPTIONS] [REFERENCE_ISSUE]\n\n  Create a .doing-cli-config file.\n\n  REFERENCE_ISSUE (optional): Find a representative work item and pass its url\n  to automatically fill the config.\n\nOptions:\n  --help  Show this message and exit.\n</code></pre>"},{"location":"reference/manual/issue_close/","title":"doing issue close","text":"<p>Close a specific WORK_ITEM_ID.</p> <pre><code>doing issue close [flags]\n</code></pre>"},{"location":"reference/manual/issue_close/#example-usage","title":"Example usage","text":"<pre><code>doing issue close 12345\ndoing issue close 12345 6789 34141 1231\n</code></pre>"},{"location":"reference/manual/issue_close/#options","title":"Options","text":"<pre><code>Usage: doing issue close [OPTIONS] WORK_ITEM_ID...\n\n  Close a specific WORK_ITEM_ID.\n\n  A '#' prefix is allowed. You can specify multiple IDs by separating with a\n  space.\n\nOptions:\n  --help  Show this message and exit.\n</code></pre>"},{"location":"reference/manual/issue_create/","title":"doing issue create","text":"<p>Create an issue.</p> <pre><code>doing issue create [flags]\n</code></pre>"},{"location":"reference/manual/issue_create/#example-usage","title":"Example usage","text":"<pre><code>doing issue create \"I found a bug\"\ndoing issue create \"I found a bug\" -a \"john.doe@company.com\"\ndoing issue create \"I found a bug\" -a @me\ndoing issue create \"I found a bug\" -m\ndoing issue create \"I found a bug\" --labels \"tag1, tag2\"\ndoing issue create \"I found a bug\" --description \"More details on the bug\"\ndoing issue create \"I found a bug\" --type \"Bug\"\ndoing issue create \"This is a task\" --type \"Task\" --parent 12345 \ndoing issue create \"This is a task\" --story_points 10\ndoing issue create \"This is a task\" --web\n</code></pre>"},{"location":"reference/manual/issue_create/#options","title":"Options","text":"<pre><code>Usage: doing issue create [OPTIONS] ISSUE\n\n  Create an issue.\n\n  ISSUE is the title to be used for the new work item.\n\nOptions:\n  -m, --mine / --not-mine         Assign issue to yourself. Shorthand for '-a\n                                  @me'.  [env var: DOING_ISSUE_CREATE_MINE]\n  -a, --assignee TEXT             Emailadres or alias of person to assign.\n                                  Defaults to empty (unassigned). Use '@me' to\n                                  self-assign.  [env var:\n                                  DOING_ISSUE_CREATE_ASSIGNEE]\n  -b, --body TEXT                 Optional description of the work item.  [env\n                                  var: DOING_ISSUE_CREATE_BODY]\n  -t, --type TEXT                 Type of work item. Defaults to 'User Story'.\n                                  [env var: DOING_ISSUE_CREATE_TYPE]\n  -l, --label TEXT                Attach tags (labels) to work item. Comma\n                                  separate multiple tags.  [env var:\n                                  DOING_ISSUE_CREATE_LABEL]\n  -p, --parent TEXT               To create a child work item, specify the ID\n                                  of the parent work item.  [env var:\n                                  DOING_ISSUE_CREATE_PARENT]\n  -w, --web / --no-web            Open newly created issue in the web browser.\n                                  [env var: DOING_ISSUE_CREATE_WEB]\n  -s, --story_points TEXT         The number of story points to assign. Not\n                                  assigned if not specified.  [env var:\n                                  DOING_ISSUE_CREATE_STORY_POINTS]\n  --add-to-current-sprint / --do-not-add-to-current-sprint\n                                  If the item needs to be added to the current\n                                  sprint. Defaults to false  [env var:\n                                  DOING_ISSUE_CREATE_ADD_TO_CURRENT_SPRINT]\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"reference/manual/issue_create/#in-use","title":"In use","text":"<p>Setting custom defaults in the config file:</p> Bash <pre><code>doing issue create 'fixing a small typo'\n# &gt; Created issue #146545 'fixing a small typo' (Task)\n#     &gt; added area-path '{your area path}'\n#     &gt; added iteration-path '{your iteration path}'\n#     &gt; added assignee 'john.doe@domain.com'\n# .   &gt; assigned 5 story points\n</code></pre> .doing-cli-config.yml <pre><code># ... other (required) config items...\ndefault_reviewers: 'john.doe@domain.com'\ndefaults:\nDOING_CREATE_ISSUE_TYPE: 'Task'\nDOING_WORKON_TYPE: 'Task'\nDOING_ISSUE_CREATE_STORY_POINTS: 5\nDOING_WORKON_STORY_POINTS: 5\n</code></pre> <p>Overriding the existing config using environment variables:</p> Bash <pre><code>export DOING_ISSUE_CREATE_ASSIGNED_TO='jane@company.com'\ndoing issue create 'fixing a small typo'\n# &gt; Created issue #146545 'fixing a small typo' (User Story)\n#     &gt; added area-path '{your area path}'\n#     &gt; added iteration-path '{your iteration path}'\n#     &gt; added assignee 'jane@company.com'\n</code></pre> .doing-cli-config.yml <pre><code># ... other (required) config items...\ndefault_reviewers: 'john.doe@domain.com'\n</code></pre> <p>Using <code>user_aliases</code> set in the config file:</p> Shell <pre><code>doing issue create 'fixing a small typo' -a john\n# &gt; Created issue #146545 'fixing a small typo' (User Story)\n#     &gt; added area-path '{your area path}'\n#     &gt; added iteration-path '{your iteration path}'\n#     &gt; added assignee 'john.doe@domain.com'\n</code></pre> .doing-cli-config.yml <pre><code># ... other (required) config items...\nuser_aliases:\njohn: John.Doe@company.com\njane: Jane.Doe@email.net\n</code></pre>"},{"location":"reference/manual/issue_list/","title":"doing issue list","text":"<p>List issues related to the project.</p> <p>This is an alias</p> <p>\"<code>doing issue list</code> is an alias for <code>doing list</code></p>"},{"location":"reference/manual/list/","title":"doing list","text":"<p>List issues related to the project.</p> <pre><code>doing list [flags]\n</code></pre>"},{"location":"reference/manual/list/#example-usage","title":"Example usage","text":"<pre><code>doing list\ndoing list -assignee \"John.Doe@company.com\"\ndoing list -a \"John.Doe@company.com\"\ndoing list -a @me\ndoing list -author \"John.Doe@company.com\"\ndoing list --label \"some_tag\"\ndoing list --label \"some_tag, another tag\"\ndoing list --state all\ndoing list -a \"John.Doe@company.com\" -s all\ndoing list --web\ndoing list --type \"User Story\"\n</code></pre> <p>Issue state open or closed?</p> <p>To determine if an issue is open or closed, <code>doing</code> maps the different workflow states. </p>"},{"location":"reference/manual/list/#options","title":"Options","text":"<pre><code>Usage: doing list [OPTIONS]\n\n  List issues related to the project.\n\nOptions:\n  -a, --assignee TEXT             Filter by assignee (email address)  [env\n                                  var: DOING_LIST_ASSIGNEE]\n  -A, --author TEXT               Filter by author (email address)  [env var:\n                                  DOING_LIST_AUTHOR]\n  -l, --label TEXT                Filter by labels (tag). Comma separate\n                                  multiple tags.  [env var: DOING_LIST_LABEL]\n  -s, --state TEXT                Filter by state. State should be: one of the\n                                  doing-cli default states: 'open', 'closed',\n                                  'all'; a custom state defined under\n                                  'custom_states' in the .doing-cli.config.yml\n                                  file; or a state available in this team,\n                                  between quotes, e.g. \"'Active'\". Defaults to\n                                  'open'.  [env var: DOING_LIST_STATE]\n  -t, --type TEXT                 Type of work item. E.g.: 'Bug', 'User\n                                  Story', 'Task'  [env var: DOING_LIST_TYPE]\n  -w, --web / --no-web            Open overview of issues in the web browser.\n                                  [env var: DOING_LIST_WEB]\n  --story_points TEXT             Filter on number of story points. Use\n                                  'unassigned' to find empty. You can use the\n                                  following inequality symbols as prefixes:\n                                  '&gt;', '&gt;=', '&lt;' and '&lt;='.  [env var:\n                                  DOING_LIST_STORY_POINTS]\n  -o, --output_format TEXT        Output format. 'table' has a rich display,\n                                  'array' will return a string list with ID's.\n                                  [env var: DOING_LIST_OUTPUT_FORMAT]\n  --show_state / --no-show_state  Show column with work item state.  [env var:\n                                  DOING_LIST_SHOW_STATE]\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"reference/manual/open/","title":"doing open","text":"<p>Quickly open certain links.</p> <pre><code>doing open [flags]\n</code></pre>"},{"location":"reference/manual/open/#example-usage","title":"Example usage","text":"<p>Most <code>doing open</code> commands do not take arguments:</p> <pre><code>doing open board\ndoing open issues\ndoing open pipe\ndoing open prs\ndoing open repo\ndoing open sprint\ndoing open policies\ndoing open branches\n</code></pre> <p>Some do:</p> <pre><code>doing open issue 12345\ndoing open branch master\ndoing open pr 54321\n</code></pre> <p>And for some it is optional (attempts to auto-detect argument):</p> <pre><code>doing open issue\ndoing open pr\n</code></pre>"},{"location":"reference/manual/open/#options","title":"Options","text":"<pre><code>Usage: doing open [OPTIONS] COMMAND [ARGS]...\n\n  Quickly open certain links.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  board     Open board view.\n  branch    Open a specific BRANCH_NAME.\n  branches  Open an overview of the repositories' branches.\n  issue     Open a specific WORK_ITEM_ID.\n  issues    Open all active issues view.\n  pipe      Open latest pipeline runs for repository view.\n  policies  Open repository policy settings.\n  pr        Open a specific PULLREQUEST_ID.\n  prs       Open active PRs for repository view.\n  repo      Open repository view.\n  sprint    Open current sprint view.\n</code></pre>"},{"location":"reference/manual/pr_checkout/","title":"doing pr checkout","text":"<p>Check out a pull request in git.</p> <p>PR_ID is the ID number of a pull request. '!' prefix is allowed.</p> <p>This command is a shorthand for  <code>az repos pr checkout --id</code></p> <pre><code>doing pr checkout [flags]\n</code></pre>"},{"location":"reference/manual/pr_checkout/#example-usage","title":"Example usage","text":"<pre><code>doing pr checkout 12345\n</code></pre>"},{"location":"reference/manual/pr_checkout/#options","title":"Options","text":"<pre><code>Usage: doing pr close [OPTIONS] PR_ID...\n\n  Close a specific PR_ID.\n\n  PR_ID is the ID number of a pull request. '!' prefix is allowed. You can\n  specify multiple IDs by separating with a space.\n\nOptions:\n  --help  Show this message and exit.\n</code></pre>"},{"location":"reference/manual/pr_close/","title":"doing pr close","text":"<p>Close a specific PR_ID.</p> <pre><code>doing pr close [flags]\n</code></pre>"},{"location":"reference/manual/pr_close/#example-usage","title":"Example usage","text":"<pre><code>doing pr close 12345\ndoing pr close 12345 6789 34141 1231\n</code></pre>"},{"location":"reference/manual/pr_close/#options","title":"Options","text":"<pre><code>Usage: doing pr close [OPTIONS] PR_ID...\n\n  Close a specific PR_ID.\n\n  PR_ID is the ID number of a pull request. '!' prefix is allowed. You can\n  specify multiple IDs by separating with a space.\n\nOptions:\n  --help  Show this message and exit.\n</code></pre>"},{"location":"reference/manual/pr_create/","title":"doing pr create","text":"<p>Create a pull request.</p> <pre><code>doing pr create [flags]\n</code></pre>"},{"location":"reference/manual/pr_create/#example-usage","title":"Example usage","text":"<pre><code>doing pr create 1234\ndoing pr create 1234 --draft -r \"john.doe@company.com\"\ndoing pr create 1234 --draft -r \"john.doe@company.com jane.doe@company.com\"\ndoing pr create 1234 --draft -r \"@me jane.doe@company.com\"\ndoing pr create 1234 --draft --checkout\ndoing pr create 1234 --delete-source-branch --self-approve --auto-complete\ndoing pr create 1234 --default-branch develop\ndoing pr create 1234 --branch-prefix \"fix/\"\n</code></pre> <p><code>doing</code> will create a branch name using the format {work_item_id}_{issue_title}, where the {issue_title} is in lowercase, snake_case with all special characters removed. Example: issue #13 'Fix @ bug !' becomes 13_fix bug. If that branch already exists on the remote, <code>doing</code> will use that one.</p> <p>If a new branch is created while doing <code>pr create</code>, it will be branched from the default branch in Azure Devops, which usually will be <code>master</code>, but might be a different branch. This can be The pull request will target this same branch. Where to branch from can be overridden by using the option <code>-default-branch</code>.   </p>"},{"location":"reference/manual/pr_create/#options","title":"Options","text":"<pre><code>Usage: doing pr create [OPTIONS] WORK_ITEM_ID\n\n  Create a pull request from a work item ID.\n\n  WORK_ITEM_ID is the work item ID that will be linked to the PR.\n\nOptions:\n  --draft / --no-draft            Create draft/WIP pull request. Reviewers\n                                  will not be notified until you publish.\n                                  Default is --draft.  [env var:\n                                  DOING_PR_CREATE_DRAFT]\n  --auto-complete / --no-auto-complete\n                                  Set the PR to complete autom. when all\n                                  policies have passed. Default is --auto-\n                                  complete.  [env var:\n                                  DOING_PR_CREATE_AUTO_COMPLETE]\n  --self-approve / --no-self-approve\n                                  Add yourself as reviewer and add your\n                                  approval. Default is --no-self-approve.\n                                  [env var: DOING_PR_CREATE_SELF_APPROVE]\n  -r, --reviewers TEXT            Space separated list of reviewer emails or\n                                  aliases. Defaults to \"\"  [env var:\n                                  DOING_PR_CREATE_REVIEWERS]\n  --checkout / --no-checkout      Run git commands to checkout remote branch\n                                  locally. Default is --checkout.  [env var:\n                                  DOING_PR_CREATE_CHECKOUT]\n  --delete-source-branch / --no-delete-source-branch\n                                  Set to delete source branch when pull\n                                  request completes. Default is --delete-\n                                  source-branch.  [env var:\n                                  DOING_PR_CREATE_DELETE_SOURCE_BRANCH]\n  -w, --web / --no-web            Open newly created issue in the web browser.\n                                  [env var: DOING_PR_CREATE_WEB]\n  -b, --default-branch TEXT       The name of the branch to branch from and\n                                  to. It overrides the repository's default\n                                  branch.  [env var:\n                                  DOING_PR_CREATE_DEFAULT_BRANCH]\n  --branch-prefix TEXT            The prefix to be prepended to the branch\n                                  name. Defaults to \"\"  [env var:\n                                  DOING_PR_CREATE_BRANCH_PREFIX]\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"reference/manual/pr_create/#in-use","title":"In use","text":"<p>Using <code>user_aliases</code> set in the config file:</p> Shell <pre><code>doing pr create 1234 --reviewers 'john jane'\n# &gt; Created pull request #49281 'fixing a small typo'\n#     &gt; linked work item #1234\n# ...\n#     &gt; added reviewers: 'John.Doe@company.com Jane.Doe@email.net'\n</code></pre> .doing-cli-config.yml <pre><code># ... other (required) config items...\nuser_aliases:\njohn: John.Doe@company.com\njane: Jane.Doe@email.net\n</code></pre> <p>Using <code>default_reviewers</code> set in the config file:</p> Shell <pre><code>doing pr create 1234\n# &gt; Created pull request #49281 'fixing a small typo'\n#     &gt; linked work item #1234\n# ...\n#     &gt; added reviewers: 'John.Doe@company.com Jane.Doe@email.net'\n</code></pre> .doing-cli-config.yml <pre><code># ... other (required) config items...\ndefault_reviewers: \"john jane\"\nuser_aliases:\njohn: John.Doe@company.com\njane: Jane.Doe@email.net\n</code></pre>"},{"location":"reference/manual/pr_list/","title":"doing pr list","text":"<p>List pull requests related to the project.</p> <pre><code>doing pr list [flags]\n</code></pre>"},{"location":"reference/manual/pr_list/#example-usage","title":"Example usage","text":"<pre><code>doing pr list\ndoing pr list -assignee \"John.Doe@company.com\"\ndoing pr list -a \"John.Doe@company.com\"\ndoing list -a @me\ndoing list --label \"some_tag\"\ndoing list --label \"some_tag, another tag\"\ndoing list --state all\ndoing list --state merged\ndoing list -a @me -s all -l a_tag\ndoing list --web -s merged\n</code></pre> <p>PR Statuses</p> <p>For consistency with GitHub CLI's <code>gh pr list</code>, we use <code>{open|closed|merged|all}</code> for PR status and internally translate to devops's <code>{active|abandoned|completed|all}</code>. This is useful for developers working cross-platform.</p>"},{"location":"reference/manual/pr_list/#options","title":"Options","text":"<pre><code>Usage: doing pr list [OPTIONS]\n\n  List pull requests related to the project.\n\nOptions:\n  -a, --assignee TEXT             Filter by assigned reviewers (email\n                                  address).  [env var: DOING_PR_LIST_ASSIGNEE]\n  -l, --label TEXT                Filter by labels (tag). Comma separate\n                                  multiple tags.  [env var:\n                                  DOING_PR_LIST_LABEL]\n  -L, --limit INTEGER             Maximum number of items to fetch (default\n                                  30)  [env var: DOING_PR_LIST_LIMIT]\n  -s, --state [open|closed|merged|all]\n                                  Filter by state. Defaults to 'open'  [env\n                                  var: DOING_PR_LIST_STATE]\n  -w, --web / --no-web            Open overview of issues in the web browser.\n                                  [env var: DOING_PR_LIST_WEB]\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"reference/manual/workon/","title":"doing workon","text":"<p>Create issue with PR and switch git branch.</p> <pre><code>doing workon [flags]\n</code></pre>"},{"location":"reference/manual/workon/#example-usage","title":"Example usage","text":"<pre><code>doing workon \"an issue\"\ndoing workon \"an issue\" --type Bug\ndoing workon \"an issue\" --type 'User Story'\ndoing workon \"an issue\" --parent 12345\ndoing workon \"an issue\" --reviewers \"john.doe@company.com jane.doe@company.com\"\ndoing workon \"an issue\" --no-auto-complete --no-draft --self-approve\ndoing workon \"an issue\" --story-points 3\ndoing workon \"an issue\" --default-branch develop\ndoing workon \"an issue\" --branch-prefix \"fix/\"\n</code></pre>"},{"location":"reference/manual/workon/#options","title":"Options","text":"<pre><code>Usage: doing workon [OPTIONS] ISSUE\n\n  Create issue with PR and switch git branch.\n\n  Create self-assigned issue, draft pull request and switch git branch all in\n  one go.\n\n  ISSUE is the title to be used for the new work item.\n\nOptions:\n  --type [Bug|Epic|Feature|Issue|Task|Test Case|User Story]\n                                  Type of work item. Defaults to \"User Story\"\n                                  [env var: DOING_WORKON_TYPE]\n  -l, --label TEXT                Attach tags (labels) to work item. Comma\n                                  separate multiple tags.  [env var:\n                                  DOING_WORKON_LABEL]\n  -p, --parent TEXT               To create a child work item, specify the ID\n                                  of the parent work item.  [env var:\n                                  DOING_WORKON_PARENT]\n  -r, --reviewers TEXT            Space separated list of reviewer emails.\n                                  Defaults to \"\"  [env var:\n                                  DOING_WORKON_REVIEWERS]\n  --draft / --no-draft            Create draft/WIP pull request. Reviewers\n                                  will not be notified until you publish.\n                                  Default is --draft.  [env var:\n                                  DOING_WORKON_DRAFT]\n  --auto-complete / --no-auto-complete\n                                  Set the PR to complete autom. when all\n                                  policies have passed. Default is --auto-\n                                  complete.  [env var:\n                                  DOING_WORKON_AUTO_COMPLETE]\n  --self-approve / --no-self-approve\n                                  Add yourself as reviewer and add your\n                                  approval. Default is --no-self-approve.\n                                  [env var: DOING_WORKON_SELF_APPROVE]\n  --checkout / --no-checkout      Run git commands to checkout remote branch\n                                  locally. Default is --checkout.  [env var:\n                                  DOING_WORKON_CHECKOUT]\n  --delete-source-branch / --no-delete-source-branch\n                                  Set to delete source branch when pull\n                                  request completes. Default is --delete-\n                                  source-branch.  [env var:\n                                  DOING_WORKON_DELETE_SOURCE_BRANCH]\n  -s, --story-points TEXT         The number of story points to assign. Not\n                                  assigned if not specified.  [env var:\n                                  DOING_WORKON_STORY_POINTS]\n  -b, --default-branch TEXT       The name of the branch to branch from and\n                                  to. It overrides the repository's default\n                                  branch.  [env var:\n                                  DOING_WORKON_DEFAULT_BRANCH]\n  --branch-prefix TEXT            The prefix to be prepended to the branch\n                                  name. Defaults to \"\"  [env var:\n                                  DOING_WORKON_BRANCH_PREFIX]\n  --add-to-current-sprint / --do-not-add-to-current-sprint\n                                  If the item needs to be added to the current\n                                  sprint. Defaults to false  [env var:\n                                  DOING_WORKON_ADD_TO_CURRENT_SPRINT]\n  --help                          Show this message and exit.\n</code></pre>"}]}